/**
 * Процесс редактирования
 В коде приложения задать свойства редактора:
 Базовый URL;
 Относительный URL для загрузки палитры объектов;
 Относительный URL для загрузки чертежа;
 Относительный URL для сохранения;
 Вызвать метод Редактировать чертёж или Создать новый чертёж;
 В процессе редактирования редактор должен:
 Контролировать изменение свойств объекта, для которых установлен валидатор. В случае изменения свойства должен быть вызван соответствующий валидатор;
 Контролировать пересечение объектов, если для объектов установлены ограничения по пересечениям;
 Контролировать размеры объекта, если для объекта установлены ограничения по размерам;
 Если в процессе работы компонент не может выполнить какое-нибудь действие из-за отсутствия необходимых настроек, например BaseUrl, компонент должен явно выводить сообщение об ошибке;
 *
 */
var Topology = function () {
  
  var self = this;

  /**
   * @type {String}
   * Назначение: Базовый URL для обращения к сервисам;
   */
  this.BaseUrl = null;

  /**
   * @type {String}
   * Назначение: Относительный URL для загрузки палитры компонентов;
   */
  this.GetPaletteUrl = null;

  /**
   * @type {String}
   * Назначение: Имя скрипта для загрузки палитры компонентов;
   */
  this.GetPaletteScript = null;

  /**
   * @type {String}
   * Назначение: Относительный URL для загрузки чертежа;
   */
  this.LoadModelUrl = null;

  /**
   * @type {String}
   * Назначение: Имя скрипта для загрузки чертежа;
   */
  this.LoadModelScriptl = null;

  /**
   * @type {String}
   * Назначение: Относительный URL для сохранения чертежа;
   */
  this.SaveModelUrl = null;

  /**
   * @type {String}
   * Назначение: Имя скрипта для сохранения чертежа;
   */
  this.SaveModelScript = null;

  this.actions = {
    /**
     * @param {String} uuid
     * @returns undefined
     * Назначение: Загружает чертеж для редактирования;
     * Действие:
       Обращается по к JS методу по адресу [BaseURL + GetPaletteUrl] и загружает палитру компонентов. HTTP метод: POST. Аргументы: нет. Результат вызова: массив объектов Component;
       Если GetPaletteUrl не задан, обращается к JS методу GetPaletteScript и загружает палитру компонентов. Аргументы вызова: нет. Результат вызова: массив объектов Component;
       Обращается по к JS методу по адресу [BaseURL + LoadModelUrl] и загружает чертеж. HTTP метод: POST. Аргументы: Uuid – uuid чертежа. Результат вызова - объект Model;
       Если LoadModelUrl не задан, обращается к JS методу LoadModelScript и загружает чертеж. Аргументы: Uuid – uuid чертежа. Результат вызова - объект Model;
     *
     */
    Load: function (uuid) {

    },

    /**
     * @param {String} uuid Uuid: строка. Идентификатор для нового чертежа;
     * @returns {undefined}
     * Назначение: Создает новый пустой чертеж;
     * Действие:
     Обращается по к JS методу по адресу [BaseURL + GetPaletteUrl] и загружает палитру компонентов. HTTP метод: POST. Аргументы: нет. Результат вызова: массив объектов Component;
     Если GetPaletteUrl не задан, обращается к JS методу GetPaletteScript и загружает палитру компонентов. Аргументы вызова: нет. Результат вызова: массив объектов Component;
     Очищает загруженную в редактора Model;
     *
     */
    New: function (uuid) {

    },

    /**
     * @returns {String} Uuid: строка. Идентификатор сохраненного чертежа;
     * Назначение: Загружает чертеж для редактирования;
     * Действие:
     Обращается по к JS методу по адресу [BaseURL + SaveModelUrl] и сохраняет чертеж. HTTP метод: POST. Аргументы: Model –чертеж, объект Model. Результат вызова: Uuid – uuid чертежа;
     Если GetModelUrl не задан, обращается к JS методу GetModelScript и сохраняет чертеж. Аргументы: Model –чертеж, объект Model. Результат вызова: Uuid – uuid чертежа;
     *
     */
    Save: function () {

    }
  }

};
